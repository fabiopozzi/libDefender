%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: C:\arash\lwip\exploit3.eps
%%CreationDate: () ()
%%BoundingBox: 0.0000 0.0000 231.5000 437.5000
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold

%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0.0000 0.0000 231.5000 437.5000
%AI3_TileBox: 0.0000 0.0000 231.5000 437.5000
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
{
pop
}
{
Adobe_packedarray begin
Adobe_packedarray
{
dup xcheck
{
bind
} if
userdict 3 1 roll put
} forall
end
} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource

Adobe_packedarray /initialize get exec

%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize
{
/setcmykcolor where
{
pop
}
{
userdict /Adobe_cmykcolor_vars 2 dict dup begin put
/_setrgbcolor
/setrgbcolor load def
/_currentrgbcolor
/currentrgbcolor load def
Adobe_cmykcolor begin
Adobe_cmykcolor
{
dup xcheck
{
bind
} if
pop pop
} forall
end
end
Adobe_cmykcolor begin
} ifelse
} def
/terminate
{
currentdict Adobe_cmykcolor eq
{
end
} if
} def
/setcmykcolor
{
1 sub 4 1 roll
3
{
3 index add neg dup 0 lt
{
pop 0
} if
3 1 roll
} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
{
1 sub neg 3 1 roll
} repeat
0
} def
currentdict readonly pop end
setpacking

%%EndResource

%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
{
pop
}
{
userdict /Adobe_cshow_vars 1 dict dup begin put
/_cshow 
{} def
Adobe_cshow begin
Adobe_cshow
{
dup xcheck
{
bind
} if
userdict 3 1 roll put
} forall
end
end
} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
exch /_cshow
exch put
{
0 0 Adobe_cshow_vars /_cshow get exec
} forall
} def
currentdict readonly pop end
setpacking

%%EndResource

%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
{
pop
}
{
Adobe_customcolor begin
Adobe_customcolor
{
dup xcheck
{
bind
} if
pop pop
} forall
end
Adobe_customcolor begin
} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
{
end
} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
{
4 index mul 4 1 roll
} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource 


%%BeginResource: procset Adobe_typography_AI3 1.0 0
%%Title: (Typography Operators)%%Version: 1.0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 46 dict dup begin put
/initialize
{
/TZ
where
{
pop
}
{
Adobe_typography_AI3 begin
Adobe_typography_AI3
{
dup xcheck
{
bind
} if
pop pop
} forall
end
Adobe_typography_AI3 begin
} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
{
end
} if
} def
/modifyEncoding
{
/_tempEncode exch ddef
/_pntr 0 ddef
{
counttomark -1 roll
dup type dup /marktype eq   
{
pop pop exit
}
{
/nametype eq
{
_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
put
}
{
/_pntr exch ddef
}
ifelse
}
ifelse
}
loop 
_tempEncode
}
def
/TE 
{
StandardEncoding 256 array copy modifyEncoding 
/_nativeEncoding exch def
} def
/TZ  
{
/_useNativeEncoding exch def
pop pop
findfont dup length 2 add dict
begin
mark exch
{
1 index /FID ne { def } if cleartomark mark
}
forall
pop
/FontName exch def
counttomark 0 eq
{
Encoding StandardEncoding eq 1 _useNativeEncoding eq and
{
/Encoding _nativeEncoding def
}
if
cleartomark
}
{ 
/Encoding load 256 array copy 
modifyEncoding /Encoding exch def
}
ifelse  
FontName currentdict
end
definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj 
{
_cx _cy _sp _ax _ay 6 5 roll
} def

/a0
{
/Tx 
{
dup 
currentpoint 3 2 roll
tr _psf
newpath moveto
tr _ctm _pss
} ddef
/Tj 
{
dup
currentpoint 3 2 roll
trj _pjsf
newpath moveto
trj _ctm _pjss
} ddef
} def
/a1
{
W B
} def
/e0
{
/Tx 
{
tr _psf
} ddef
/Tj 
{
trj _pjsf
} ddef
} def
/e1
{
W F 
} def
/i0
{
/Tx
{
tr sp
} ddef
/Tj
{
trj jsp
} ddef
} def
/o0
{
/Tx
{
tr sw rmoveto
} ddef
/Tj
{
trj swj rmoveto
} ddef
} def
/r0
{
/Tx
{
tr _ctm _pss
} ddef
/Tj
{
trj _ctm _pjss
} ddef
} def
/r1
{
W S
} def
/To
{
pop _ctm currentmatrix pop
} def
/TO
{
Te _ctm setmatrix newpath
} def
/Tp
{
pop _tm astore pop _ctm setmatrix 
2 dict begin /W {} def /h {} def
} def
/TP
{
end
iTm 0 0 moveto
} def
/Tr
{
Te currentpoint newpath moveto
dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
dup /_render exch ddef
_renderStart exch get load exec
} def
/iTm 
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Te
{
_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
/_render -1 ddef
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt 
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/Tq 
{
pop
} def
/TX {pop} def
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/T- 
{
_hyphen Tx
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource

%%BeginResource: procset Adobe_Illustrator_AI3 1.0 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 55 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /i0 /i0 /i0 /i0] def 
/_renderEnd [null null null null /e1 /r1 /a1 /clip] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
{
dup xcheck
{
bind
} if
pop pop
} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def

/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
{
dup dup load dup
length 2 mul dict copy def
} if
load begin def end
} def
/npop
{
{
pop
} repeat
} def

/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
{
2 npop 
(0) exch 2 copy 0 exch put pop
gsave
false charpath currentpoint
4 index setmatrix
stroke
grestore
moveto
2 copy rmoveto
} exch cshow
3 npop
} def
/jss
{
4 1 roll
{
2 npop 
(0) exch 2 copy 0 exch put 
gsave
_sp eq 
{
exch 6 index 6 index 6 index 5 -1 roll widthshow  
currentpoint
}
{
false charpath currentpoint
4 index setmatrix stroke
}ifelse
grestore
moveto
2 copy rmoveto
} exch cshow
6 npop
} def
/sp
{
{
2 npop (0) exch
2 copy 0 exch put pop
false charpath
2 copy rmoveto
} exch cshow
2 npop
} def
/jsp
{
{
2 npop 
(0) exch 2 copy 0 exch put 
_sp eq 
{
exch 5 index 5 index 5 index 5 -1 roll widthshow  
}
{
false charpath
}ifelse
2 copy rmoveto
} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
{pop true setstrokeadjust
/c
{
curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll curveto
} def
/V
/v load def
/y
{
2 copy curveto
} def
/Y
/y load def
/l
{
lineto
} def
/L
/l load def
/m
{
moveto
} def
}
{
/c
{
pl curveto
} def
/C
/c load def
/v
{
currentpoint 6 2 roll pl curveto
} def
/V
/v load def
/y
{
pl 2 copy curveto
} def
/Y
/y load def
/l
{
pl lineto
} def
/L
/l load def
/m
{
pl moveto
} def
} ifelse
/d
{
setdash
} def
/cf {} def
/i
{
dup 0 eq
{
pop cf
} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H {} def /h { closepath } def /N { _pola 0 eq {

_doClip 1 eq {clip /_doClip 0 ddef} if newpath } {

/CRender {N} ddef }ifelse } def /n {N} def

/F
{
_pola 0 eq 
{
_doClip 1 eq 
{
gsave _pf grestore clip newpath /_lp /none ddef _fc 
/_doClip 0 ddef
}
{
_pf
}ifelse
} 
{
/CRender {F} ddef
}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
{
_doClip 1 eq 
{
gsave _ps grestore clip newpath /_lp /none ddef _sc 
/_doClip 0 ddef
}
{
_ps
}ifelse
} 
{
/CRender {S} ddef
}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
{
_doClip 1 eq
gsave F grestore 
{
gsave S grestore clip newpath /_lp /none ddef _sc
/_doClip 0 ddef
} 
{
S
}ifelse
}
{
/CRender {B} ddef
}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
{
dup type (stringtype) eq {pop} if
} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat
userdict begin
/showpage {} def
false setoverprint
pop
} def
/~ { end _i restore } def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
{
_of setoverprint
_gf setgray
/_lp /fill ddef
} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
{
_os setoverprint
_gs setgray
/_lp /stroke ddef
} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
{
_of setoverprint
_cf aload pop setcmykcolor
/_lp /fill ddef
} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
{
_os setoverprint
_cs aload pop setcmykcolor
/_lp /stroke ddef
} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
{
_of setoverprint
_if _gf 1 exch sub setcustomcolor
/_lp /fill ddef
} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
{
_os setoverprint
_is _gs 1 exch sub setcustomcolor
/_lp /stroke ddef
} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
{
0 1 _dp 1 sub _dl mod
{
_da exch get 3 get
} for
_dp 1 sub _dl mod 1 add packedarray
_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
definepattern pop
} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
{
null dp
} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
{
0
{
dup 1 add index type /arraytype eq
{
1 add
}
{
exit
} ifelse
} loop
array astore
} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
{
/_d exch _dd exch get def
0 2 _d length 2 sub
{
/_x exch def
/_c _d _x get _ ne def
/_r _d _x 1 add get cvlit def
_r _ ne
{
_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
[
/save cvx
_llx neg _lly neg /translate cvx
_c
{
nc /begin cvx
} if
_r dup type /stringtype eq
{
cvx
}
{
{exec} /forall cvx
} ifelse
_c
{
/end cvx
} if
/restore cvx
] cvx
/_fn 12 _n length add string def
_y _fn cvs pop
/_y _y 1 add def
_fn 12 _n putinterval
_fn _c false dp
_d exch _x 1 add exch put
} if
} for
} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
{
dup _pm rotate fc
1 -1 _pm scale fc
neg _pm rotate fc
}
{
pop
} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
0 1 _fdd length 1 sub
{
/_fd exch _fdd exch get ddef
_fd
0 2 _fd length 2 sub
{
gsave
2 copy get dup _ ne
{
cvx exec _fc
}
{
pop
} ifelse
2 copy 1 add get dup _ ne
{
aload pop findfont _fm
patternfill
}
{
pop
fill
} ifelse
grestore
pop
} for
pop
} for
restore
newpath
} ddef
/_psf
{
save
0 1 _fdd length 1 sub
{
/_fd exch _fdd exch get ddef
_fd
0 2 _fd length 2 sub
{
gsave
2 copy get dup _ ne
{
cvx exec _fc
}
{
pop
} ifelse
2 copy 1 add get dup _ ne
{
aload pop findfont _fm
9 copy 6 npop patternashow
}
{
pop
6 copy 3 npop ashow
} ifelse
grestore
pop
} for
pop
} for
restore

sw rmoveto
} ddef
/_pjsf
{
save
0 1 _fdd length 1 sub
{
/_fd exch _fdd exch get ddef
_fd
0 2 _fd length 2 sub
{
gsave
2 copy get dup _ ne
{
cvx exec _fc
}
{
pop
} ifelse
2 copy 1 add get dup _ ne
{
aload pop findfont _fm
12 copy 6 npop patternawidthshow
}
{
pop 9 copy 3 npop awidthshow
} ifelse
grestore
pop
} for
pop
} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
{
dup _pm rotate sc
1 -1 _pm scale sc
neg _pm rotate sc
}
{
pop
} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
0 1 _sdd length 1 sub
{
/_sd exch _sdd exch get ddef
_sd
0 2 _sd length 2 sub
{
gsave
2 copy get dup _ ne
{
cvx exec _sc
}
{
pop
} ifelse
2 copy 1 add get dup _ ne
{
aload pop findfont _sm
patternstroke
}
{
pop stroke
} ifelse
grestore
pop
} for
pop
} for
restore
newpath
} ddef
/_pss
{
save
0 1 _sdd length 1 sub
{
/_sd exch _sdd exch get ddef
_sd
0 2 _sd length 2 sub
{
gsave
2 copy get dup _ ne
{
cvx exec _sc
}
{
pop
} ifelse
2 copy 1 add get dup _ ne
{
aload pop findfont _sm
10 copy 6 npop patternashowstroke
}
{
pop 7 copy 3 npop ss
} ifelse
grestore
pop
} for
pop
} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
0 1 _sdd length 1 sub
{
/_sd exch _sdd exch get ddef
_sd
0 2 _sd length 2 sub
{
gsave
2 copy get dup _ ne
{
cvx exec _sc
}
{
pop
} ifelse
2 copy 1 add get dup _ ne
{
aload pop findfont _sm
13 copy 6 npop patternawidthshowstroke
}
{
pop 10 copy 3 npop jss
} ifelse
grestore
pop
} for
pop
} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def

/A
{
pop
} def

/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
/Z {findfont begin currentdict dup length dict begin
{1 index /FID ne {def} {pop pop} ifelse} forall /FontName exch def dup length 0 ne
{/Encoding Encoding 256 array copy def 0 exch {dup type /nametype eq
{Encoding 2 index 2 index put pop 1 add} {exch pop} ifelse} forall} if pop
currentdict dup end end /FontName get exch definefont pop} bind def
currentdict readonly pop end
setpacking
/annotatepage
{
} def

%%EndResource
%AI3-Grid.0 0 0 0 0 0 0 2
%%EndProlog
%%BeginSetup
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
%%BeginEncoding:_Helvetica Helvetica
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
]  /_Helvetica/Helvetica Z
%%EndEncoding
%%BeginEncoding:_Helvetica-Bold Helvetica-Bold
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
]  /_Helvetica-Bold/Helvetica-Bold Z
%%EndEncoding
%%EndSetup
u
  0.000 0.000 0.000 0.247 k
 [] 0 d
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  220.2500 35.0000 m
  76.0000 35.0000 L
  85.0000 26.0000 L
  229.2500 26.0000 L
  220.2500 35.0000 L
B
U
u
  0.000 0.000 0.000 0.247 k
  0.000 0.000 0.000 1.000 K
  229.2500 26.0000 m
  220.2500 35.0000 L
  220.2500 117.5000 L
  229.2500 108.5000 L
  229.2500 26.0000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  220.2500 35.0000 m
  76.0000 35.0000 L
  76.0000 117.5000 L
  220.2500 117.5000 L
  220.2500 35.0000 L
B
U
0 To
1 0 0 1 80 104.5 0 Tp
TP
/_Helvetica 10.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(void main\(\) {\r) Tx
TO
0 To
1 0 0 1 80 92.5 0 Tp
TP
/_Helvetica 10.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(   char buffer[96];\r) Tx
TO
0 To
1 0 0 1 80 80.5 0 Tp
TP
/_Helvetica 10.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(   ...\r) Tx
TO
0 To
1 0 0 1 80 68.5 0 Tp
TP
/_Helvetica 10.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(   strcpy\(buffer, large_string\);\r) Tx
TO
0 To
1 0 0 1 80 56.5 0 Tp
TP
/_Helvetica 10.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(   return;\r) Tx
TO
0 To
1 0 0 1 80 44.5 0 Tp
TP
/_Helvetica 10.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(}\r) Tx
TO
0 To
1 0 0 1 84.25 8.75 0 Tp
TP
/_Helvetica-Bold 13.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(executed code segment\r) Tx
TO
u
0.7500 w
1 J
1 j
  79.0000 219.5000 m
  92.5000 219.5000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 0.000 K
  92.0000 222.0000 m
  97.0000 219.5000 L
  92.0000 217.0000 L
  92.0000 222.0000 L
F
U
0 To
1 0 0 1 23.5 222.5 0 Tp
TP
/_Helvetica-Bold 11.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(instruction\r) Tx
TO
0 To
1 0 0 1 41.25 210.5 0 Tp
TP
/_Helvetica-Bold 11.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(pointer\r) Tx
TO
u
  0.000 0.000 0.000 0.000 k
0.2500 w
1 j
  106.0000 156.2500 m
  178.0000 156.2500 L
  178.0000 426.0000 L
  106.0000 426.0000 L
  106.0000 156.2500 L
B
U
u
1.2500 w
  0.000 0.000 0.000 1.000 K
  106.0000 399.0000 m
  178.0000 399.0000 L
S
U
u
  0.000 0.000 0.000 1.000 K
  106.2500 174.2500 m
  178.0000 174.2500 L
S
U
u
  0.000 0.000 0.000 1.000 K
  106.0000 323.5000 m
  178.0000 323.5000 L
S
U
0 To
1 0 0 1 116.5 386.75 0 Tp
TP
/_Helvetica 10.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(parameters\r) Tx
TO
0 To
1 0 0 1 119.25 329.75 0 Tp
TP
/_Helvetica 10.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(stack vars\r) Tx
TO
u
0.2500 w
1 j
  123.7500 380.2500 m
  155.0000 380.2500 L
S
U
u
0.7500 w
  0.000 0.000 0.000 1.000 K
  83.5000 291.5000 m
  92.5000 291.5000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 0.000 K
  92.0000 294.0000 m
  97.0000 291.5000 L
  92.0000 289.0000 L
  92.0000 294.0000 L
F
U
0 To
1 0 0 1 17.5 288.5 0 Tp
TP
/_Helvetica-Bold 11.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(stack pointer\r) Tx
TO
0 To
1 0 0 1 121.75 413 0 Tp
TP
/_Helvetica 10.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(env. vars\r) Tx
TO
u
0.2500 w
1 j
  123.7500 342.2500 m
  155.0000 342.2500 L
S
U
0 To
1 0 0 1 108.5 348.5 0 Tp
TP
/_Helvetica 10.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(prev. frame ptr\r) Tx
TO
0 To
1 0 0 1 116.5 368 0 Tp
TP
/_Helvetica 10.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(return addr\r) Tx
TO
u
0.2500 w
1 j
  123.7500 363.0000 m
  155.0000 363.0000 L
S
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 0.000 K
  95.0000 138.2500 m
  185.0000 138.2500 L
  185.0000 160.5000 L
  95.0000 160.5000 L
  95.0000 138.2500 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 0.000 K
  106.2500 160.5000 m
  133.2500 160.5000 L
  137.7500 169.5000 L
  146.7500 151.5000 L
  151.2500 160.5000 L
  178.0000 160.5000 L
  178.0000 142.5000 L
  106.2500 142.5000 L
  106.2500 160.5000 L
F
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
  106.2500 160.5000 m
  133.2500 160.5000 L
  137.7500 169.5000 L
  146.7500 151.5000 L
  151.2500 160.5000 L
  178.0000 160.5000 L
S
U
0 To
1 0 0 1 64 422 0 Tp
TP
/_Helvetica 10.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
0 j
  0.000 0.000 0.000 1.000 k
(0xbfffffb\r) Tx
TO
0 To
1 0 0 1 32 396 0 Tp
TP
/_Helvetica 10.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(bottom of stack\r) Tx
TO
0 To
1 0 0 1 84.5 142.5 0 Tp
TP
/_Helvetica-Bold 13.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(stack address space\r) Tx
TO
u
  0.000 0.000 0.000 0.000 k
1.2500 w
1 j
  165.5000 174.5000 m
  167.5000 174.5000 L
  169.5000 175.2500 L
  171.2500 176.5000 L
  172.5000 177.7500 L
  173.7500 179.5000 L
  174.2500 181.5000 L
  174.5000 183.2500 L
  174.5000 309.2500 L
  174.2500 311.2500 L
  173.7500 313.2500 L
  172.5000 315.0000 L
  171.2500 316.5000 L
  169.5000 317.5000 L
  167.5000 318.0000 L
  165.5000 318.2500 L
  120.5000 318.2500 L
  118.5000 318.0000 L
  116.7500 317.5000 L
  115.0000 316.5000 L
  113.5000 315.0000 L
  112.5000 313.2500 L
  111.7500 311.2500 L
  111.5000 309.2500 L
  111.5000 183.2500 L
  111.7500 181.5000 L
  112.5000 179.5000 L
  113.5000 177.7500 L
  115.0000 176.5000 L
  116.7500 175.2500 L
  118.5000 174.5000 L
  120.5000 174.5000 L
  165.5000 174.5000 L
B
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
  124.0000 289.0000 m
  155.5000 289.0000 L
S
U
u
1.2500 w
  0.000 0.000 0.000 1.000 K
  106.0000 302.0000 m
  178.0000 302.0000 L
S
U
u
0.2500 w
  125.0000 264.2500 m
  156.5000 264.2500 L
S
U
u
  0.000 0.000 0.000 1.000 k
  0.000 0.000 0.000 1.000 K
  140.2500 319.5000 m
  140.5000 320.2500 L
  141.0000 320.7500 L
  141.5000 321.2500 L
  142.2500 321.2500 L
  142.7500 320.7500 L
  143.2500 320.2500 L
  143.5000 319.5000 L
  143.2500 318.7500 L
  142.7500 318.0000 L
  142.2500 317.7500 L
  141.5000 317.7500 L
  141.0000 318.0000 L
  140.5000 318.7500 L
  140.2500 319.5000 L
B
U
u
  0.000 0.000 0.000 1.000 k
  0.000 0.000 0.000 1.000 K
  140.2500 306.0000 m
  140.5000 307.0000 L
  141.0000 307.5000 L
  141.5000 307.7500 L
  142.2500 307.7500 L
  142.7500 307.5000 L
  143.2500 307.0000 L
  143.5000 306.0000 L
  143.2500 305.2500 L
  142.7500 304.5000 L
  142.2500 304.2500 L
  141.5000 304.2500 L
  141.0000 304.5000 L
  140.5000 305.2500 L
  140.2500 306.0000 L
B
U
u
  0.000 0.000 0.000 1.000 k
  0.000 0.000 0.000 1.000 K
  140.2500 312.7500 m
  140.5000 313.5000 L
  141.0000 314.2500 L
  141.5000 314.5000 L
  142.2500 314.5000 L
  142.7500 314.2500 L
  143.2500 313.5000 L
  143.5000 312.7500 L
  143.2500 312.0000 L
  142.7500 311.2500 L
  142.2500 311.0000 L
  141.5000 311.0000 L
  141.0000 311.2500 L
  140.5000 312.0000 L
  140.2500 312.7500 L
B
U
u
0.7500 w
  119.5000 282.2500 m
  120.0000 282.5000 L
S
U
u
  123.2500 284.0000 m
  124.0000 284.2500 L
S
U
u
  127.2500 285.7500 m
  127.7500 286.2500 L
S
U
u
  131.0000 287.5000 m
  131.5000 288.0000 L
S
U
u
  134.7500 289.5000 m
  135.5000 289.7500 L
S
U
u
  138.7500 291.2500 m
  139.2500 291.5000 L
S
U
u
  142.5000 293.0000 m
  143.0000 293.2500 L
S
U
u
  146.2500 294.7500 m
  147.0000 295.2500 L
S
U
u
  150.2500 296.5000 m
  150.7500 297.0000 L
S
U
u
  154.0000 298.5000 m
  154.5000 298.7500 L
S
U
u
  157.7500 300.2500 m
  158.5000 300.5000 L
S
U
u
  161.7500 302.0000 m
  162.2500 302.2500 L
S
U
u
  165.5000 304.0000 m
  166.2500 304.2500 L
S
U
u
  119.5000 273.7500 m
  120.0000 274.2500 L
S
U
u
  123.2500 275.5000 m
  124.0000 276.0000 L
S
U
u
  127.2500 277.5000 m
  127.7500 277.7500 L
S
U
u
  131.0000 279.2500 m
  131.5000 279.5000 L
S
U
u
  134.7500 281.0000 m
  135.5000 281.2500 L
S
U
u
  138.7500 282.7500 m
  139.2500 283.2500 L
S
U
u
  142.5000 284.5000 m
  143.0000 285.0000 L
S
U
u
  146.2500 286.5000 m
  147.0000 286.7500 L
S
U
u
  150.2500 288.2500 m
  150.7500 288.5000 L
S
U
u
  154.0000 290.0000 m
  154.5000 290.2500 L
S
U
u
  157.7500 291.7500 m
  158.5000 292.2500 L
S
U
u
  161.7500 293.5000 m
  162.2500 294.0000 L
S
U
u
  165.5000 295.5000 m
  166.2500 295.7500 L
S
U
u
  119.5000 265.5000 m
  120.0000 265.7500 L
S
U
u
  123.2500 267.2500 m
  124.0000 267.5000 L
S
U
u
  127.2500 269.0000 m
  127.7500 269.2500 L
S
U
u
  131.0000 270.7500 m
  131.5000 271.2500 L
S
U
u
  134.7500 272.5000 m
  135.5000 273.0000 L
S
U
u
  138.7500 274.5000 m
  139.2500 274.7500 L
S
U
u
  142.5000 276.2500 m
  143.0000 276.5000 L
S
U
u
  146.2500 278.0000 m
  147.0000 278.2500 L
S
U
u
  150.2500 279.7500 m
  150.7500 280.2500 L
S
U
u
  154.0000 281.5000 m
  154.5000 282.0000 L
S
U
u
  157.7500 283.5000 m
  158.5000 283.7500 L
S
U
u
  161.7500 285.2500 m
  162.2500 285.5000 L
S
U
u
  165.5000 287.0000 m
  166.2500 287.2500 L
S
U
u
  119.5000 257.0000 m
  120.0000 257.2500 L
S
U
u
  123.2500 258.7500 m
  124.0000 259.2500 L
S
U
u
  127.2500 260.5000 m
  127.7500 261.0000 L
S
U
u
  131.0000 262.5000 m
  131.5000 262.7500 L
S
U
u
  134.7500 264.2500 m
  135.5000 264.5000 L
S
U
u
  138.7500 266.0000 m
  139.2500 266.2500 L
S
U
u
  142.5000 267.7500 m
  143.0000 268.2500 L
S
U
u
  146.2500 269.5000 m
  147.0000 270.0000 L
S
U
u
  150.2500 271.5000 m
  150.7500 271.7500 L
S
U
u
  154.0000 273.2500 m
  154.5000 273.5000 L
S
U
u
  157.7500 275.0000 m
  158.5000 275.2500 L
S
U
u
  161.7500 276.7500 m
  162.2500 277.2500 L
S
U
u
  165.5000 278.7500 m
  166.2500 279.0000 L
S
U
u
  0.000 0.000 0.000 1.000 K
  119.5000 290.5000 m
  120.0000 291.0000 L
S
U
u
  123.2500 292.5000 m
  124.0000 292.7500 L
S
U
u
  127.2500 294.2500 m
  127.7500 294.5000 L
S
U
u
  131.0000 296.0000 m
  131.5000 296.2500 L
S
U
u
  134.7500 298.0000 m
  135.5000 298.2500 L
S
U
u
  138.7500 299.7500 m
  139.5000 300.0000 L
S
U
u
  142.5000 301.5000 m
  143.2500 301.7500 L
S
U
u
  146.5000 303.2500 m
  147.0000 303.7500 L
S
U
u
  150.2500 305.0000 m
  151.0000 305.5000 L
S
U
u
  154.2500 307.0000 m
  154.7500 307.2500 L
S
U
u
  158.0000 308.7500 m
  158.7500 309.2500 L
S
U
u
  162.0000 310.5000 m
  162.5000 311.0000 L
S
U
u
  165.7500 312.5000 m
  166.2500 312.7500 L
S
U
u
  0.000 0.000 0.000 1.000 K
  119.5000 240.2500 m
  120.0000 240.5000 L
S
U
u
  123.2500 242.0000 m
  124.0000 242.5000 L
S
U
u
  127.2500 243.7500 m
  127.7500 244.2500 L
S
U
u
  131.0000 245.5000 m
  131.5000 246.0000 L
S
U
u
  134.7500 247.5000 m
  135.5000 247.7500 L
S
U
u
  138.7500 249.2500 m
  139.2500 249.5000 L
S
U
u
  142.5000 251.0000 m
  143.0000 251.5000 L
S
U
u
  146.2500 252.7500 m
  147.0000 253.2500 L
S
U
u
  150.2500 254.5000 m
  150.7500 255.0000 L
S
U
u
  154.0000 256.5000 m
  154.5000 256.7500 L
S
U
u
  157.7500 258.2500 m
  158.5000 258.5000 L
S
U
u
  161.7500 260.0000 m
  162.2500 260.2500 L
S
U
u
  165.5000 262.0000 m
  166.2500 262.2500 L
S
U
u
  0.000 0.000 0.000 1.000 K
  119.5000 231.7500 m
  120.0000 232.2500 L
S
U
u
  123.2500 233.7500 m
  124.0000 234.0000 L
S
U
u
  127.2500 235.5000 m
  127.7500 235.7500 L
S
U
u
  131.0000 237.2500 m
  131.5000 237.5000 L
S
U
u
  134.7500 239.0000 m
  135.5000 239.5000 L
S
U
u
  138.7500 240.7500 m
  139.2500 241.2500 L
S
U
u
  142.5000 242.5000 m
  143.0000 243.0000 L
S
U
u
  146.2500 244.5000 m
  147.0000 244.7500 L
S
U
u
  150.2500 246.2500 m
  150.7500 246.5000 L
S
U
u
  154.0000 248.0000 m
  154.5000 248.5000 L
S
U
u
  157.7500 249.7500 m
  158.5000 250.2500 L
S
U
u
  161.7500 251.5000 m
  162.2500 252.0000 L
S
U
u
  165.5000 253.5000 m
  166.2500 253.7500 L
S
U
u
  119.5000 223.5000 m
  120.0000 223.7500 L
S
U
u
  123.2500 225.2500 m
  124.0000 225.5000 L
S
U
u
  127.2500 227.0000 m
  127.7500 227.5000 L
S
U
u
  131.0000 228.7500 m
  131.5000 229.2500 L
S
U
u
  134.7500 230.7500 m
  135.5000 231.0000 L
S
U
u
  138.7500 232.5000 m
  139.2500 232.7500 L
S
U
u
  142.5000 234.2500 m
  143.0000 234.5000 L
S
U
u
  146.2500 236.0000 m
  147.0000 236.5000 L
S
U
u
  150.2500 237.7500 m
  150.7500 238.2500 L
S
U
u
  154.0000 239.5000 m
  154.5000 240.0000 L
S
U
u
  157.7500 241.5000 m
  158.5000 241.7500 L
S
U
u
  161.7500 243.2500 m
  162.2500 243.5000 L
S
U
u
  165.5000 245.2500 m
  166.2500 245.5000 L
S
U
u
  0.000 0.000 0.000 1.000 K
  119.5000 215.0000 m
  120.0000 215.5000 L
S
U
u
  123.2500 216.7500 m
  124.0000 217.2500 L
S
U
u
  127.2500 218.7500 m
  127.7500 219.0000 L
S
U
u
  131.0000 220.5000 m
  131.5000 220.7500 L
S
U
u
  134.7500 222.2500 m
  135.5000 222.5000 L
S
U
u
  138.7500 224.0000 m
  139.2500 224.5000 L
S
U
u
  142.5000 225.7500 m
  143.0000 226.2500 L
S
U
u
  146.2500 227.7500 m
  147.0000 228.0000 L
S
U
u
  150.2500 229.5000 m
  150.7500 229.7500 L
S
U
u
  154.0000 231.2500 m
  154.5000 231.5000 L
S
U
u
  157.7500 233.0000 m
  158.5000 233.5000 L
S
U
u
  161.7500 234.7500 m
  162.2500 235.2500 L
S
U
u
  165.5000 236.7500 m
  166.2500 237.0000 L
S
U
u
  119.5000 248.5000 m
  120.0000 249.0000 L
S
U
u
  123.2500 250.5000 m
  124.0000 250.7500 L
S
U
u
  127.2500 252.2500 m
  127.7500 252.5000 L
S
U
u
  131.0000 254.0000 m
  131.5000 254.2500 L
S
U
u
  134.7500 255.7500 m
  135.5000 256.2500 L
S
U
u
  138.7500 257.5000 m
  139.2500 258.0000 L
S
U
u
  142.5000 259.5000 m
  143.0000 259.7500 L
S
U
u
  146.2500 261.2500 m
  147.0000 261.5000 L
S
U
u
  150.2500 263.0000 m
  150.7500 263.2500 L
S
U
u
  154.0000 264.7500 m
  154.5000 265.2500 L
S
U
u
  157.7500 266.5000 m
  158.5000 267.0000 L
S
U
u
  161.7500 268.5000 m
  162.2500 268.7500 L
S
U
u
  165.5000 270.2500 m
  166.2500 270.5000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 0.000 K
  125.7500 208.5000 m
  121.0000 206.7500 L
  126.7500 204.2500 L
  122.0000 198.7500 L
  128.0000 196.5000 L
  124.7500 191.2500 L
  132.5000 190.2500 L
  133.5000 184.2500 L
  140.2500 186.5000 L
  145.2500 183.2500 L
  149.0000 186.2500 L
  153.0000 183.2500 L
  156.2500 187.0000 L
  161.5000 184.5000 L
  166.0000 189.2500 L
  174.5000 187.7500 L
  172.2500 193.2500 L
  178.0000 194.0000 L
  174.2500 200.2500 L
  179.0000 203.7500 L
  172.7500 207.5000 L
  176.2500 213.0000 L
  169.5000 213.2500 L
  172.2500 219.7500 L
  164.0000 218.7500 L
  163.5000 225.2500 L
  155.0000 222.5000 L
  152.0000 227.2500 L
  146.5000 223.0000 L
  141.2500 227.2500 L
  138.2500 220.7500 L
  132.5000 224.2500 L
  132.7500 218.5000 L
  125.2500 220.0000 L
  127.2500 214.2500 L
  120.5000 214.5000 L
  125.7500 208.5000 L
F
U
u
  0.000 0.000 1.000 0.000 k
0.2500 w
  0.000 0.000 0.000 1.000 K
  116.7500 217.5000 m
  112.0000 215.7500 L
  117.7500 213.2500 L
  113.0000 207.7500 L
  119.0000 205.5000 L
  115.7500 200.2500 L
  123.5000 199.2500 L
  124.7500 193.2500 L
  131.2500 195.5000 L
  136.2500 192.2500 L
  140.0000 195.2500 L
  144.0000 192.2500 L
  147.2500 196.0000 L
  152.5000 193.5000 L
  157.0000 198.2500 L
  165.5000 196.7500 L
  163.2500 202.2500 L
  169.2500 203.0000 L
  165.2500 209.2500 L
  170.0000 212.7500 L
  163.7500 216.5000 L
  167.2500 222.0000 L
  160.5000 222.2500 L
  163.2500 228.7500 L
  155.0000 227.7500 L
  154.5000 234.2500 L
  146.0000 231.5000 L
  143.0000 236.2500 L
  137.5000 232.0000 L
  132.2500 236.2500 L
  129.2500 229.7500 L
  123.5000 233.2500 L
  123.7500 227.5000 L
  116.2500 229.0000 L
  118.2500 223.2500 L
  111.5000 223.5000 L
  116.7500 217.5000 L
B
U
0 To
1 0 0 1 127.25 217.25 0 Tp
TP
/_Helvetica-Bold 11.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(attack\r) Tx
TO
0 To
1 0 0 1 130 205.25 0 Tp
TP
/_Helvetica-Bold 11.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(code\r) Tx
TO
0 To
1 0 0 1 117 279.5 0 Tp
TP
/_Helvetica 10.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(addr of the\r) Tx
TO
0 To
1 0 0 1 115.25 267.5 0 Tp
TP
/_Helvetica 10.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(attack code\r) Tx
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF
